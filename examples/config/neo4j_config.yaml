# MemGOS Configuration with Neo4j Graph Database
# This example shows how to configure MemGOS to use Neo4j as the graph database

user_id: "example-user"
session_id: "session-001"
enable_textual_memory: true
enable_activation_memory: false
enable_parametric_memory: false

# Chat model configuration
chat_model:
  backend: "openai"
  model: "gpt-3.5-turbo"
  api_key: "${OPENAI_API_KEY}"

# Memory reader configuration
mem_reader:
  backend: "general"
  memory_filename: "textual_memory.json"
  embedder:
    backend: "openai"
    model: "text-embedding-ada-002"
    api_key: "${OPENAI_API_KEY}"

# Neo4j Graph Database Configuration
graph_db:
  provider: "neo4j"
  
  # Neo4j connection settings
  uri: "bolt://localhost:7687"
  username: "neo4j"
  password: "${NEO4J_PASSWORD}"
  database: "neo4j"
  
  # Connection pool settings
  max_conn_pool: 50
  conn_timeout: "30s"
  read_timeout: "15s"
  write_timeout: "15s"
  retry_attempts: 3
  retry_delay: "1s"
  
  # Security settings
  ssl_mode: "disable"  # or "require" for production
  
  # Monitoring
  metrics: true
  logging: false
  
  # TLS configuration (optional)
  # tls_config:
  #   insecure_skip_verify: false
  #   cert_file: "/path/to/cert.pem"
  #   key_file: "/path/to/key.pem"
  #   ca_file: "/path/to/ca.pem"

# Vector database configuration
vector_db:
  backend: "qdrant"
  url: "http://localhost:6333"
  collection_name: "memgos_vectors"

# Memory scheduler with NATS KV
enable_mem_scheduler: true
mem_scheduler:
  enabled: true
  use_nats_kv: true
  nats_urls: ["nats://localhost:4222"]
  nats_kv_bucket_name: "memgos-scheduler"
  thread_pool_max_workers: 4

# API server configuration
api_server:
  enabled: true
  host: "0.0.0.0"
  port: 8080
  cors_enabled: true
  rate_limit_enabled: true
  rate_limit_requests_per_minute: 1000

# Authentication configuration
auth:
  jwt_secret: "${JWT_SECRET}"
  jwt_expiration_hours: 24
  api_tokens_enabled: true
  
# Logging configuration
logging:
  level: "info"
  format: "json"
  output: "stdout"

# Performance tuning
performance:
  # Memory allocation optimizations
  gc_percent: 100
  max_goroutines: 1000
  
  # Query caching
  query_cache_enabled: true
  query_cache_size: 1000
  query_cache_ttl: "10m"